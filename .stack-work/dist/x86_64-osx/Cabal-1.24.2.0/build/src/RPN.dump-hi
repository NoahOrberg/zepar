
==================== FINAL INTERFACE ====================
2017-09-28 14:36:26.66362 UTC

interface zepar-0.1.0.0-9qHRIZSu9HWEpMODzgWLlh:RPN 8002
  interface hash: 921a73a5bcd946fd28ff74e709b7d18b
  ABI hash: ac6a60fe7992efccde635f41d6aaabd5
  export-list hash: 8ed2cfdd3c2556411de3200f2a1a0b84
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  RPN.eval
  RPN.parse
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
b2fac8ba07f21e4c4332c1383f588ee6
  $fEqExp :: GHC.Classes.Eq RPN.Exp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ RPN.Exp RPN.$fEqExp_$c== RPN.$fEqExp_$c/= -}
b2fac8ba07f21e4c4332c1383f588ee6
  $fEqExp_$c/= :: RPN.Exp -> RPN.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: RPN.Exp) (b :: RPN.Exp) ->
                 case RPN.$fEqExp_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b2fac8ba07f21e4c4332c1383f588ee6
  $fEqExp_$c== :: RPN.Exp -> RPN.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b2fac8ba07f21e4c4332c1383f588ee6
  $fShowExp :: GHC.Show.Show RPN.Exp
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ RPN.Exp
                  RPN.$fShowExp_$cshowsPrec
                  RPN.$fShowExp_$cshow
                  RPN.$fShowExp_$cshowList -}
b2fac8ba07f21e4c4332c1383f588ee6
  $fShowExp1 :: RPN.Exp -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: RPN.Exp) (w1 :: GHC.Base.String) ->
                 RPN.$w$cshowsPrec 0# w w1) -}
b2fac8ba07f21e4c4332c1383f588ee6
  $fShowExp_$cshow :: RPN.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: RPN.Exp) ->
                 RPN.$fShowExp_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b2fac8ba07f21e4c4332c1383f588ee6
  $fShowExp_$cshowList :: [RPN.Exp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ RPN.Exp RPN.$fShowExp1) -}
b2fac8ba07f21e4c4332c1383f588ee6
  $fShowExp_$cshowsPrec :: GHC.Types.Int -> RPN.Exp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: RPN.Exp) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 RPN.$w$cshowsPrec ww1 w1 w2 }) -}
231b6d16f1a4f3f596f884e983b3b3bb
  $tc'Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9165178091057207562##
                   1172397925022313203##
                   RPN.$trModule
                   RPN.$tc'Div1) -}
c82c5e93306db9cec723601bbcee73c2
  $tc'Div1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Div"#) -}
db79404c6285f71bf17d96a606a9118b
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1234173909503123114##
                   11311955465873986576##
                   RPN.$trModule
                   RPN.$tc'Mul1) -}
bd03a0a17e89137590b45d35d308f08c
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mul"#) -}
a3db86157090b98071ff11a407dfb825
  $tc'Num :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8258506067509010869##
                   10108145337458384073##
                   RPN.$trModule
                   RPN.$tc'Num1) -}
a788f47ec89b24ab7dbf693a521df3bb
  $tc'Num1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Num"#) -}
701ea51ee4e07994c9d3d993aacc0b5f
  $tc'Plus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4865835945402729001##
                   6963480081852434530##
                   RPN.$trModule
                   RPN.$tc'Plus1) -}
1f682342957437bded994c70f3e5deb2
  $tc'Plus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Plus"#) -}
897c1df73072f37ddb0b32c6c555c11b
  $tc'Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15931732617740589681##
                   1114256579395032903##
                   RPN.$trModule
                   RPN.$tc'Sub1) -}
bea9af4b2b1011c9d40ea20823d8b9e6
  $tc'Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sub"#) -}
14bb442fd13e2f2baed6335bd78a0fe3
  $tcExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3316740748028283512##
                   7651242021594946504##
                   RPN.$trModule
                   RPN.$tcExp1) -}
7a766be26727408c16172280c981b886
  $tcExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Exp"#) -}
ad5d3ad06f5cc9e191fc1755365443a3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module RPN.$trModule2 RPN.$trModule1) -}
9dc53e571fa475517dd9e2047e48b4bb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RPN"#) -}
3654fffb56f7c84809679068e52ae039
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "zepar-0.1.0.0-9qHRIZSu9HWEpMODzgWLlh"#) -}
b2fac8ba07f21e4c4332c1383f588ee6
  $w$cshowsPrec ::
    GHC.Prim.Int# -> RPN.Exp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
b2fac8ba07f21e4c4332c1383f588ee6
  data Exp
    = Num GHC.Types.Int
    | Plus RPN.Exp RPN.Exp
    | Sub RPN.Exp RPN.Exp
    | Mul RPN.Exp RPN.Exp
    | Div RPN.Exp RPN.Exp
1ef2e39c0ea08886675d3b6e8427083f
  eval :: RPN.Exp -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
835f0be5099931c8a8c3ba336940043a
  parse :: [GHC.Base.String] -> RPN.Exp
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (exp :: [GHC.Base.String]) ->
                 RPN.parse_iParse exp (GHC.Types.[] @ RPN.Exp)) -}
abc3f3e52ecd8d257829d5fc5fc0a743
  parse_iParse :: [[GHC.Types.Char]] -> [RPN.Exp] -> RPN.Exp
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
instance [safe] GHC.Classes.Eq [RPN.Exp] = RPN.$fEqExp
instance [safe] GHC.Show.Show [RPN.Exp] = RPN.$fShowExp
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

